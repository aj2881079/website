let currentImage;

function compressImage(event) {
  const file = event.target.files[0];
  const preview = document.getElementById('imagePreview');
  preview.innerHTML = ''; // Clear previous preview

  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      const img = new Image();
      img.src = e.target.result;
      img.onload = function() {
        currentImage = img;
        displayPreview(img);
      };
    };
    reader.readAsDataURL(file);
  }
}

function displayPreview(img) {
  const preview = document.getElementById('imagePreview');
  const previewImage = document.createElement('img');
  previewImage.src = img.src;
  previewImage.style.maxWidth = '100%';
  preview.appendChild(previewImage);
}

function updateQualityLabel() {
  const quality = document.getElementById('quality').value;
  document.getElementById('qualityLabel').innerText = `${quality}%`;
}

function compressAndDownload() {
  const quality = document.getElementById('quality').value / 100;
  
  if (currentImage) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = currentImage.width;
    canvas.height = currentImage.height;
    ctx.drawImage(currentImage, 0, 0);

    canvas.toBlob(function(blob) {
      const url = URL.createObjectURL(blob);
      const downloadBtn = document.getElementById('downloadBtn');
      downloadBtn.href = url;
      downloadBtn.download = 'compressed_image.jpg';
      downloadBtn.style.display = 'inline-block';
    }, 'image/jpeg', quality);
  }
}

document.getElementById('quality').addEventListener('input', compressAndDownload);
